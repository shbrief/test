name: Create TSV Files

on:
  # Run after the DOI curation workflow completes successfully
  workflow_run:
    workflows: ["curation.yml"]
    types:
      - completed
    branches: [ main ]
  
  # Keep manual trigger for testing
  workflow_dispatch:

jobs:
  create-tsv-files:
    runs-on: ubuntu-latest
    # Only run if the triggering workflow succeeded
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Get author and year from issue
      id: get-metadata
      uses: actions/github-script@v7
      with:
        script: |
          // Get the issue that triggered the original workflow
          const issue = await github.rest.issues.get({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.payload.workflow_run.pull_requests[0]?.number || 
                         JSON.parse(context.payload.workflow_run.head_commit.message.match(/\#(\d+)/)?.[1] || '1')
          }).catch(async () => {
            // Fallback: get the most recent issue if direct lookup fails
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'all',
              sort: 'updated',
              per_page: 1
            });
            return issues.data[0] ? { data: issues.data[0] } : null;
          });
          
          if (!issue?.data) {
            console.log('No issue found, using default values');
            core.setOutput('author_lastname', 'Unknown');
            core.setOutput('year', new Date().getFullYear());
            return;
          }
          
          // Look for author and year in issue comments
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue.data.number
          });
          
          let author = 'Unknown';
          let year = new Date().getFullYear();
          
          // Check the bot comment for author and year
          const botComment = comments.data.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('### Author')
          );
          
          if (botComment) {
            const authorMatch = botComment.body.match(/### Author\s*\n([^\n]+)/);
            const yearMatch = botComment.body.match(/### Year\s*\n(\d{4})/);
            
            if (authorMatch && authorMatch[1].trim()) {
              // Extract last name (assume format "First Last" or just "Last")
              const fullName = authorMatch[1].trim();
              const nameParts = fullName.split(' ');
              author = nameParts[nameParts.length - 1]; // Get last part as last name
            }
            
            if (yearMatch) {
              year = yearMatch[1];
            }
          }
          
          console.log(`Author: ${author}, Year: ${year}`);
          core.setOutput('author_lastname', author);
          core.setOutput('year', year);
      
    - name: Create directory and TSV files
      run: |
        # Create directory name using author's last name and year
        AUTHOR_LASTNAME="${{ steps.get-metadata.outputs.author_lastname }}"
        YEAR="${{ steps.get-metadata.outputs.year }}"
        TSV_DIR="data/${AUTHOR_LASTNAME}_${YEAR}"
        
        echo "Creating directory: $TSV_DIR"
        
        # Create the directory if it doesn't exist
        mkdir -p "$TSV_DIR"
        
        # Create folder name for file naming
        FOLDER_NAME="${AUTHOR_LASTNAME}_${YEAR}"
        
        # Create sample TSV file
        cat > "$TSV_DIR/${FOLDER_NAME}_sample.tsv" << 'EOF'
        Name	Age	City	Country
        John Doe	30	New York	USA
        Jane Smith	25	London	UK
        Bob Johnson	35	Toronto	Canada
        Alice Brown	28	Sydney	Australia
        EOF
        
        # Create study TSV file
        cat > "$TSV_DIR/${FOLDER_NAME}_study.tsv" << 'EOF'
        Product	Price	Category	In Stock
        Laptop	999.99	Electronics	true
        Book	19.99	Education	true
        Coffee Mug	12.50	Kitchen	false
        Headphones	79.99	Electronics	true
        EOF
        
        echo "Created TSV files in $TSV_DIR directory:"
        echo "- ${FOLDER_NAME}_sample.tsv"
        echo "- ${FOLDER_NAME}_study.tsv"
        ls -la "$TSV_DIR"
        
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-generated TSV files - $(date '+%Y-%m-%d %H:%M:%S')"
          git push
        fi